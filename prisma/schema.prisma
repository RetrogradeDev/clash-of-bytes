// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  
  username  String  @unique
  displayUsername String

  email     String   @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  puzzles   Puzzle[]
  solutions Solution[]
  votes     Vote[]
  sessions  Session[]

  emailVerified Boolean
  image         String?
  accounts      Account[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  @@map("sessions")
  @@unique([token])
}

model Puzzle {
  id           String    @id @default(cuid())
  title        String
  description  String // Markdown
  mode         String // chars, runs, keys

  inputFormat  String
  outputFormat String

  inputDescription  String
  outputDescription String

  testCases    Json // Array of {input: string, output: string}

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  featuredDate DateTime?

  authorId     String

  author    User       @relation(references: [id], fields: [authorId], onDelete: Cascade)
  solutions Solution[]
  votes     Vote[]

  @@map("puzzles")
}

model Solution {
  id        String   @id @default(cuid())
  code      String
  language  String   // 'javascript' or 'python'
  score     Float    // lower is better
  createdAt DateTime @default(now())

  puzzleId  String
  userId    String

  puzzle Puzzle @relation(references: [id], fields: [puzzleId], onDelete: Cascade)
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([puzzleId, userId, language])
  @@map("solutions")
}

model Vote {
  id       String @id @default(cuid())
  puzzleId String
  userId   String

  // Relations
  puzzle Puzzle @relation(references: [id], fields: [puzzleId], onDelete: Cascade)
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([puzzleId, userId])
  @@map("votes")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
